#include "xil_printf.h"
#include "stdbool.h"
#include "stdint.h"
#include "stdlib.h"
#include "math.h"

#define DELAY_UNIT 80
#define LEDS    (*(unsigned volatile *) 0x40000000)
#define SW      (*(unsigned volatile *) 0x40000008)

#define DPSEG   (*(unsigned volatile *) 0x40020000)
#define AN      (*(unsigned volatile *) 0x40020008)
#define btn_X   (*(unsigned volatile *) 0x40030000)

#define MAX_LOG 25
typedef struct{
	uint8_t from;
	uint8_t to;
}LogEntry;



#define ALARM_COUNTER (*( volatile unsigned *) 0x44a00000)
#define ALARM0 (*(volatile unsigned *) 0x44a00004)
#define ALARM0_VALUE (*(volatile unsigned *) 0x44a00008)
#define JB   (*(volatile unsigned  *) 0x40010000)

#define JC34 (*(volatile unsigned *)0x44A20000)
#define COUNTER (*(volatile unsigned *)0x44A20004)
#define AB (*(volatile unsigned *)0x44A20008)

#define ONE_US 100
#define ONE_MS 100*1000

#define btnU 0
#define btnD 1
#define btnR 2
#define btnL 3

#define L 10
#define r 11
#define C 12
#define U 13

static uint8_t record_counter=0;
static uint8_t rightCounter=0;
static uint8_t leftCounter=0;
static uint8_t centerCounter=0;
static unsigned MIN_VALUE=0;
static unsigned MAX_VALUE=0;
static uint8_t previous_Letter = U;




void delay_ms(unsigned t)
{
    unsigned cntr1, cntr2;
    while(t--){
        for(cntr1=0;cntr1<100;cntr1++){
            for(cntr2=0;cntr2<DELAY_UNIT;cntr2++){}
        }
    }
}


void delay_ms2(uint32_t val){
	ALARM0_VALUE = ONE_MS * val;
	while((ALARM0 & (1<<0))==0){
	}
}


void delay_us(uint32_t val){
	ALARM0_VALUE = ONE_US * val;
	while((ALARM0 & (1<<0))==0){

	}

}


_Bool btn_pressed(int x){
    static enum {NOT_PRESSED, DEBOUNCE_PRESS, PRESSED, DEBOUNCE_RELEASE} state[4] = {NOT_PRESSED, NOT_PRESSED, NOT_PRESSED, NOT_PRESSED};
    static uint8_t counter[4] = {0,0,0,0};
    _Bool retval = false;
    _Bool B = (btn_X & (1 << x)) != 0;

    switch(state[x]) {
    	case NOT_PRESSED:
			if(B){
				counter[x] = 0;
				state[x] = DEBOUNCE_PRESS;
			}
        break;
		case DEBOUNCE_PRESS:
			if(B){
				if(counter[x]<5) {
					counter[x]++;
				} else {
					retval = true;
					state[x] = PRESSED;
				}
			} else {
				state[x] = NOT_PRESSED;
			}
			break;
		case PRESSED:
			if(!B){
				counter[x] = 0;
				state[x] = DEBOUNCE_RELEASE;
			}
			break;
		case DEBOUNCE_RELEASE:
			if(!B){
				if(counter[x]<5) {
					counter[x]++;
				} else {
					state[x] = NOT_PRESSED;
				}
			} else {
				state[x] = PRESSED;
			}
			break;
    }
    return retval;
}

static const uint8_t disp_lut[15] = {

  0b1000000, // 0
  0b1111001, // 1
  0b0100100, // 2
  0b0110000, // 3
  0b0011001, // 4
  0b0010010, // 5
  0b0000010, // 6
  0b1111000, // 7
  0b0000000, // 8
  0b0010000,  // 9
  0b1000111, // L  10
  0b0101111, // r  11
  0b1000110, // C  12
  0b1000001, //U    13
};



static uint8_t data[4] = {0,0,0,0};
static unsigned counter_LEFT = 0;
static unsigned counter_RIGHT = 0;

static unsigned LEFT_VALUE;
static unsigned RIGHT_VALUE;


static uint8_t LEFT_duty;
static uint8_t RIGHT_duty;


void estimating_width_LEFT(_Bool current){
	static unsigned state = 0;
	static unsigned counter_1;
	static unsigned counter_0;
	if(current==1){
		counter_1++;
	}
	if(current==0){
		counter_0++;
	}
	if(++state==180){
		LEFT_duty=counter_1*100/180;
		state=0;
		counter_1=0;
		counter_0=0;
	}
}

void estimating_width_(_Bool current){
	static unsigned state = 0;
	static unsigned counter_1=0;
	static unsigned counter_0=0;
	if(current==1){
		counter_1++;
	}
	if(current==0){
		counter_0++;
	}
	if(++state==180){
		RIGHT_duty=counter_1*100/180;
		state=0;
		counter_1=0;
		counter_0=0;
	}
}






#define estimating_interval 100
int main(){
	print(" Program Started \n");



	_Bool right_coil;
	_Bool left_coil;
	_Bool prev_left_coil;
	_Bool prev_right_coil;
	unsigned cycle_count=0;
	unsigned left_coil_dips=0;
	unsigned right_coil_dips=0;

	_Bool JB0;
	_Bool prev_JB0;
	_Bool JB1;
	_Bool prev_JB1;


	LogEntry logBuf[MAX_LOG];
	uint8_t logCount = 0;

	unsigned break_counter=0;


	unsigned prev_LEFT_VALUE;
	unsigned prev_RIGHT_VALUE;
	while(1){
		delay_us(1);
		JB0=JC34&1;
		JB1=(JC34>>1)&1;

		estimating_width_LEFT(JB0);
		estimating_width_RIGHT(JB1);

		if(prev_JB0 == 1 && JB0 == 0){
			left_coil_dips ++;
		}
		if(prev_JB1 == 1 && JB1 == 0){
			right_coil_dips ++;
		}

//		data[2]=(record_counter/10)%10;
//		data[3]=(record_counter/1)%10;

		data[1]=leftCounter;
		data[2]=centerCounter;
		data[3]=rightCounter;



		prev_JB0=JB0;
		prev_JB1=JB1;
		seg_disp(data,0);

		uint8_t current = data[0];


		if(++cycle_count==estimating_interval){


			if((right_coil_dips==0 && left_coil_dips==0) ){

				data[0]=C;
			}else{
				if(right_coil_dips==0 && left_coil_dips!=0){

					data[0]=r;
				}

				if(right_coil_dips!=0 && left_coil_dips==0){

					data[0]=L;
				}

				if(right_coil_dips!=0 && left_coil_dips!=0){
					data[0]=U;

				}

			}


			cycle_count=0;
			right_coil_dips=0;
			left_coil_dips=0;

		}


		//uint8_t current = data[1];
//		if(previous_Letter!=current){
//			data[1] = previous_Letter;
//			previous_Letter = current;
//
//			if(previous_Letter==r){
//				rightCounter++;
//
//			}
//			if(previous_Letter==L){
//				leftCounter++;
//			}
//			if(previous_Letter==C){
//				centerCounter++;
//			}
//			record_counter++;
//		}
//
//		if(current== r && previous_Letter == C){
//			rightCounter--;
//		}
//
//		if(current== L && previous_Letter == C){
//			leftCounter--;
//		}

		detecting_object();

		prev_right_coil=right_coil;
		prev_left_coil=left_coil;

	}


}



void detecting_object(){
	static enum {UNDETECTED, LEFT,CENTER, RIGHT, WAIT}  state = UNDETECTED;
	unsigned wait_counter=0;
	switch(state){
		case UNDETECTED:
			if(data[0]==U){
				state = UNDETECTED;
			}else{
				state=WAIT;
			}
			break;
		case WAIT:
			for(wait_counter=0;wait_counter<100;wait_counter++){}
			if(data[0]==U){
				state = UNDETECTED;
			}
			if(data[0]==L){
				state=LEFT;
			}
			if(data[0]==C){
				state=CENTER;
			}
			if(data[0]==r){
				state=RIGHT;
			}
			break;
		case LEFT:
			leftCounter++;
			state = WAIT;
			break;
		case CENTER:
			centerCounter++;
			state = WAIT;;
			break;
		case RIGHT:
			rightCounter++;
			state = WAIT;
			break;
	}
}

//
//void detecting_object(uint8_t current){
//	static enum{ UNDETECTED, DETECTED} state = UNDETECTED;
//
//	switch(state){
//		case UNDETECTED:
//			if(data[0] == U){
//				state = UNDETECTED;
//			}else{
//				state=DETECTED;
//			}
//			break;
//		case DETECTED:
//			//NOT SHIFTING
//			//if(current!=previous_Letter){
//				//record_counter++;
//		//}
////				else{
////				if(data[0] == U){
////					//record_counter++;
////					state = UNDETECTED;
////				}
////
////			}
//
//
//
//				if(current!=previous_Letter){
//					//record_counter++;
//					state=DETECTED;
//				}
//
//				if(current == U){
//					if(previous_Letter==r){
//						rightCounter++;
//						state = UNDETECTED;
//
//					}
//					if(previous_Letter==L){
//						leftCounter++;
//						state = UNDETECTED;
//						//xil_printf("Yes");
//					}
//					if(previous_Letter==C){
//						centerCounter++;
//						state = UNDETECTED;
//					}
//					record_counter++;
//
//				}
//			break;
//
//	}
//}




void seg_disp(uint8_t data[4], uint8_t cursor){

    static uint16_t blink_cnt = 0;
    blink_cnt++;


    _Bool show_cursor = ((blink_cnt & 0x0100) == 0);

    static uint8_t digit = 0;


    AN = 0b1111;

    // Find the segment pattern for this digit, ignoring decimal for the moment:
    uint8_t pattern = disp_lut[ data[3 - digit] ];

    if(digit == 0 || digit == 2 || digit == 3 || digit == 1 ) {
        pattern |= 0b10000000;  // turn on decimal point in LSD
    }


    if( (cursor - 1) == digit ) {
        if(!show_cursor) {
            pattern = 0xff;
        }
    }

    // Write the pattern to the segment lines
    DPSEG = pattern;

    switch(digit) {
      case 0: AN = 0b1110; break;  // enable LSD
      case 1: AN = 0b1101; break;
      case 2: AN = 0b1011; break;
      case 3: AN = 0b0111; break;
    }

    // Move on to the next digit for next call
    digit = (digit + 1) & 0x03;
}

