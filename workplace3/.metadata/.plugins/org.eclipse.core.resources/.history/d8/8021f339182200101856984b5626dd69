#include "xil_printf.h"
#include "stdbool.h"
#include "stdint.h"

#define DELAY_UNIT 80
#define LEDS    (*(unsigned volatile *) 0x40000000)
#define SW      (*(unsigned volatile *) 0x40000008)

#define DPSEG   (*(unsigned volatile *) 0x40020000)
#define AN      (*(unsigned volatile *) 0x40020008)
#define btn_X   (*(unsigned volatile *) 0x40030000)





#define ALARM_COUNTER (*( volatile unsigned *) 0x44a00000)
#define ALARM0 (*(volatile unsigned *) 0x44a00004)
#define ALARM0_VALUE (*(volatile unsigned *) 0x44a00008)
#define JB   (*(volatile unsigned  *) 0x40010000)

#define JC34 (*(volatile unsigned *)0x44A20000)
#define COUNTER (*(volatile unsigned *)0x44A20004)
#define AB (*(volatile unsigned *)0x44A20008)

#define ONE_US 100
#define ONE_MS 100*1000

#define btnU 0
#define btnD 1
#define btnR 2
#define btnL 3




void delay_ms(unsigned t)
{
    unsigned cntr1, cntr2;
    while(t--){
        for(cntr1=0;cntr1<100;cntr1++){
            for(cntr2=0;cntr2<DELAY_UNIT;cntr2++){}
        }
    }
}


void delay_ms2(uint32_t val){
	ALARM0_VALUE = ONE_MS * val;
	while((ALARM0 & (1<<0))==0){
	}
}


void delay_us(uint32_t val){
	ALARM0_VALUE = ONE_US * val;
	while((ALARM0 & (1<<0))==0){

	}

}


_Bool btn_pressed(int x){
    static enum {NOT_PRESSED, DEBOUNCE_PRESS, PRESSED, DEBOUNCE_RELEASE} state[4] = {NOT_PRESSED, NOT_PRESSED, NOT_PRESSED, NOT_PRESSED};
    static uint8_t counter[4] = {0,0,0,0};
    _Bool retval = false;
    _Bool B = (btn_X & (1 << x)) != 0;

    switch(state[x]) {
    	case NOT_PRESSED:
			if(B){
				counter[x] = 0;
				state[x] = DEBOUNCE_PRESS;
			}
        break;
		case DEBOUNCE_PRESS:
			if(B){
				if(counter[x]<5) {
					counter[x]++;
				} else {
					retval = true;
					state[x] = PRESSED;
				}
			} else {
				state[x] = NOT_PRESSED;
			}
			break;
		case PRESSED:
			if(!B){
				counter[x] = 0;
				state[x] = DEBOUNCE_RELEASE;
			}
			break;
		case DEBOUNCE_RELEASE:
			if(!B){
				if(counter[x]<5) {
					counter[x]++;
				} else {
					state[x] = NOT_PRESSED;
				}
			} else {
				state[x] = PRESSED;
			}
			break;
    }
    return retval;
}



// Example 7-segment LUT for a certain hardware wiring.
// Make sure these bit patterns match your actual display (which segment is which bit).
static const uint8_t disp_lut[10] = {
  // a b c d e f g  (bit 7 typically for decimal point)
  // The code below is for a particular Pmod7-seg style device.
  // You may need to invert or shuffle bits based on your hardware.
  0b1000000, // 0
  0b1111001, // 1
  0b0100100, // 2
  0b0110000, // 3
  0b0011001, // 4
  0b0010010, // 5
  0b0000010, // 6
  0b1111000, // 7
  0b0000000, // 8
  0b0010000  // 9
};

void pulse_generator(){
    static uint16_t state=0;
    if(state<9990){
        JB&= ~(1<<0);
    }
    if(state>9990){
        JB|= (1<<0);
    }
    if(++state==10000){
        state=0;
    }
}
#define estimating_interval 100
int main(){
	print(" Hello \n");
	unsigned distance;
	unsigned prev_distance;
	uint8_t data[4] = {0,0,0,0};
	unsigned position;
	_Bool right_coil;
	_Bool left_coil;
	_Bool prev_left_coil;
	_Bool prev_right_coil;
	unsigned cycle_count=0;
	unsigned left_coil_dips=0;
	unsigned right_coil_dips=0;
	_Bool start_estimating_left;
	_Bool start_estimating_right;
	unsigned left_coil_width;
	unsigned right_coil_width;
	while(1){
		delay_us(200);


		left_coil=(JC34>>0) & 1;
		right_coil=(JC34>>1) & 1;

		if(left_coil == 1 && prev_left_coil==0){
			start_estimating_left^=1;
			left_coil_dips++;
		}
		if(right_coil == 1 && prev_right_coil==0){
			start_estimating_right^=1;
			right_coil_dips++;
		}

		if(start_estimating_left){
			left_coil_width++;
		}


		if(start_estimating_right){
			right_coil_width++;
		}



		if(++cycle_count==estimating_interval){


			if(right_coil_dips==0 && left_coil_dips==0){
				data[0]=0;
				data[1]=1;
				data[2]=0;
			}else{
				if(right_coil_dips==0 && left_coil_dips!=0){
					data[0]=1;
					data[1]=0;
					data[2]=0;
				}

				if(right_coil_dips!=0 && left_coil_dips==0){
					data[0]=0;
					data[1]=0;
					data[2]=1;
				}

				if(right_coil_dips!=0 && left_coil_dips!=0){
					data[0]=0;
					data[1]=0;
					data[2]=1;
				}

			}


			cycle_count=0;
			right_coil_dips=0;
			left_coil_dips=0;


		}

		seg_disp(data,0);


		prev_right_coil=right_coil;
		prev_left_coil=left_coil;

	}
}

void seg_disp(uint8_t data[4], uint8_t cursor)
{

    static uint16_t blink_cnt = 0;
    blink_cnt++;


    _Bool show_cursor = ((blink_cnt & 0x0100) == 0);

    static uint8_t digit = 0;


    AN = 0b1111;

    // Find the segment pattern for this digit, ignoring decimal for the moment:
    uint8_t pattern = disp_lut[ data[3 - digit] ];

    if(digit == 0 || digit == 2 || digit == 3 ) {
        pattern |= 0b10000000;  // turn on decimal point in LSD
    }


    if( (cursor - 1) == digit ) {
        if(!show_cursor) {
            pattern = 0xff;
        }
    }

    // Write the pattern to the segment lines
    DPSEG = pattern;

    switch(digit) {
      case 0: AN = 0b1110; break;  // enable LSD
      case 1: AN = 0b1101; break;
      case 2: AN = 0b1011; break;
      case 3: AN = 0b0111; break;
    }

    // Move on to the next digit for next call
    digit = (digit + 1) & 0x03;
}
//
//
//void led_flasher(unsigned duty_int, unsigned duty_dec_point )
//{	unsigned duty=duty_int*10+duty_dec_point;
//	static uint16_t state=0;
//	if( state < duty) //
//		LEDS= 0xFFFF;
//	if( state >= duty)
//		LEDS = 0x0000;
//	if( ++state == 1000)
//		state =0;
//}
//
//
